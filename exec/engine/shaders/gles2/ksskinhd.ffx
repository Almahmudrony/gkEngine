

//--------------------------------------------------------------------------------------
// 	File: Illum.ffx
//	Desc: The effect file for SkinHD
//
//  The files of KnifeShader Lab.
// 	It could be used in 3dsMax, FxComposer & DirectX
//
// 	by Kaimingyi 2012.8.25
//--------------------------------------------------------------------------------------
precision highp float;

#include "include/sampler_def.h"
#include "include/constant_ps_def.h"
#include "include/varying_def.h"
#include "include/shade_lib.h"

uniform highp float g_SkinScatter;

void main (void)
{
#ifdef ZPASS
// vector
    lowp vec3 normalTS = texture2D(texNormal, outTC.xy).xyz;
    normalTS = normalTS * 2.0 - 1.0;
    mediump vec3 normal = cross(outTangent.xyz, outBinormal) * outTangent.w;
    mediump mat3 Tangent2World = mat3(outTangent.xyz, outBinormal, normal);
    normal = Tangent2World * normalTS;
    normal = normalize(normal);

    normal = normal * 0.5 + 0.5;

    gl_FragColor = vec4(normal,1);
#else
    highp vec3 screenTC = outScreenTC.xyz / outScreenTC.w;
    lowp float shadow = 1.0;
	shadow = getShadow(texEnvmap, screenTC.xy);

	// pre discard
	vec4 texcolor = texture2D(texDiffuse,outTC.xy);

	// alpha test
	//if(texcolor.a < 0.25)
	//	discard;
	vec4 glosscolor = vec4(texcolor.a, texcolor.a, texcolor.a, texcolor.a);
			
	// vector
    mediump vec3 normal = (texture2D(texNormal, screenTC.xy).rgb - 0.5) * 2.0;
    normal = normalize(normal);


	vec3 view = normalize(g_camPos.xyz - outWorldPos.xyz);
	float NdotL = dot(normal, normalize(g_LightDir));
	
	float fNdotE = dot(view, normal);
	vec3 vReflVec = (2.0 * fNdotE * normal) - view;		  
	vReflVec = vReflVec.xzy;
	vReflVec.y *= -1.0;

	// gloss
	float shiness = g_Gloss;// * glosscolor.a;
	float fresnel_bia = g_FresnelBia;
	float fresnel_pow = g_Fresnel;
	float fresnel_scale = g_FresnelScale;

	// environment
	//float fGlossinessLod = 14.16231 - 0.497418 * gloss;
	vec4 envColor = textureCube( texCubemap, vReflVec );
	envColor.rgb *= envColor.a * 16.0;
	// srgb 2 linear
	texcolor = texcolor * texcolor * g_MatDiffuse;
	glosscolor = glosscolor * glosscolor;

	vec4 DifPart = vec4(1.0, 1.0, 1.0, 1.0);
	vec4 SubPart = vec4(1.0, 1.0, 1.0, 1.0);

	// HD Lambert
	nvLambSkin( NdotL, vec4(1.0, 1.0, 1.0, 1.0), texture2D(texCustom1, outTC.xy), g_SkinScatter, DifPart, SubPart );
	vec4 Diffuse = g_LightDiffuse * DifPart + SubPart;
	//NdotL = saturate(NdotL);


	// specular
	float spec = Blinn(normal, view, g_LightDir, shiness);
	spec = max(0.0, spec);

	float fFresnel = fresnel_bia + fresnel_scale * pow(1.0 - fNdotE, fresnel_pow); // 4 inst


	// lighting formula
	vec4 specular = glosscolor * g_MatSpecular * g_LightSpecular * fFresnel * shadow;
	vec4 ambient = g_SkyLight * (normal.z * 0.25 + 0.75); // 2 inst
	vec4 lightcolor = texcolor * ( ambient + Diffuse * shadow )  + NdotL * spec * specular + envColor * specular;
		
	// revert to srgb
    gl_FragColor = saturate(max(lightcolor, vec4(0,0,0,1)) * (g_ldrbright * g_Glow));
	//gl_FragColor = lightcolor * HDR_SCALE;
#endif
}
