#version 100
precision highp float;

#include "include/shade_lib.h"

uniform sampler2D texDiffuse;		// diffuse 0
uniform sampler2D texNormal;		// normal 1
uniform sampler2D texSpecular;		// specular 2
uniform sampler2D texDetail;		// detail 3
uniform sampler2D texCustom1;		// 4

uniform vec4 ScreenParam;
uniform vec4 ViewportParam;

uniform vec3 PS_ddx;
uniform vec3 PS_ddy;
uniform vec3 campos;


varying mediump vec2  TexCoord0;
varying highp vec3 FarClipPos;

vec4 AOSetting = vec4(0.5, 0.2, 4.0, 1.0);

vec4 GetViewSpacePos( in sampler2D depthSampler, in vec2 tc, in vec3 farclippos )
{
    float depth = SampleDepth( depthSampler, tc );
    
	return vec4( farclippos.xyz * depth, depth );
}

void main(void)
{
    vec3 kernel[4];
	kernel[0] = vec3(-0.556641,-0.037109,-0.654297);
	kernel[1] = vec3(0.173828,0.111328,0.064453);
	kernel[2] = vec3(0.001953,0.082031,-0.060547);
	kernel[3] = vec3(0.220703,-0.359375,-0.062500);

    vec3 FarClip = FarClipPos;
    vec4 pos = GetViewSpacePos(texDiffuse, TexCoord0, FarClip.xyz);
    vec4 pos_l = GetViewSpacePos(texDiffuse, TexCoord0 + vec2(1.0 / ViewportParam.x, 0.0), FarClip.xyz + 1.0 / ViewportParam.x * PS_ddx.xyz);
    vec4 pos_d = GetViewSpacePos(texDiffuse, TexCoord0 + vec2(0.0, 1.0 / ViewportParam.y), FarClip.xyz + 1.0 / ViewportParam.y * PS_ddy.xyz);
    
    vec3 normal = cross( (pos_d.xyz - pos.xyz), (pos_l.xyz - pos.xyz) );
    normal = -normalize( normal );

	vec3 rand = (texture2D( texNormal, TexCoord0 * ViewportParam.xy * 0.25).xyz * 2.0 - 1.0);  

	vec4 aoacc = vec4( 0.0, 0.0, 0.0, 0.0 );
	float rad = AOSetting.w * 0.00001 / pos.w;
	rad = max(rad, 0.04);

	vec3 vSample[4];
    
        int j=0;

		// get a random
		vSample[0] = reflect(kernel[j+0] , rand);  
		vSample[1] = reflect(kernel[j+1] , rand);
		vSample[2] = reflect(kernel[j+2] , rand);
		vSample[3] = reflect(kernel[j+3] , rand);

		vSample[0] *= rad;
		vSample[1] *= rad;
		vSample[2] *= rad;
		vSample[3] *= rad;

		vec3 diff0 = GetViewSpacePos(texDiffuse, TexCoord0 + vSample[0].xy, FarClip.xyz + PS_ddx.xyz*vSample[0].x + PS_ddy.xyz*vSample[0].y).xyz - pos.xyz;
		vec3 diff1 = GetViewSpacePos(texDiffuse, TexCoord0 + vSample[1].xy, FarClip.xyz + PS_ddx.xyz*vSample[1].x + PS_ddy.xyz*vSample[1].y).xyz - pos.xyz;
		vec3 diff2 = GetViewSpacePos(texDiffuse, TexCoord0 + vSample[2].xy, FarClip.xyz + PS_ddx.xyz*vSample[2].x + PS_ddy.xyz*vSample[2].y).xyz - pos.xyz;
		vec3 diff3 = GetViewSpacePos(texDiffuse, TexCoord0 + vSample[3].xy, FarClip.xyz + PS_ddx.xyz*vSample[3].x + PS_ddy.xyz*vSample[3].y).xyz - pos.xyz;

		vec4 length4 = vec4( length(diff0), length(diff1), length(diff2), length(diff3) ); 

		diff0 = diff0 / length4.x; 
		diff1 = diff1 / length4.y; 
		diff2 = diff2 / length4.z; 
		diff3 = diff3 / length4.w; 

		length4 = max(vec4(0.5, 0.5, 0.5, 0.5), length4);
		length4 *= AOSetting.x; 

		vec4 occlude;
		occlude.x = dot(normal, diff0);
		occlude.y = dot(normal, diff1);
		occlude.z = dot(normal, diff2);
		occlude.w = dot(normal, diff3);

		occlude = max( vec4(0.0, 0.0, 0.0, 0.0), occlude - vec4(AOSetting.y, AOSetting.y, AOSetting.y, AOSetting.y)) * ( vec4(1.0, 1.0, 1.0, 1.0) / (vec4(1.0, 1.0, 1.0, 1.0) + length4 * length4) );

		aoacc += occlude;

//        j = 4;
//        
//		vSample[0] = reflect(kernel[j+0] , rand);  
//		vSample[1] = reflect(kernel[j+1] , rand);
//		vSample[2] = reflect(kernel[j+2] , rand);
//		vSample[3] = reflect(kernel[j+3] , rand);
//
//		vSample[0] *= rad;
//		vSample[1] *= rad;
//		vSample[2] *= rad;
//		vSample[3] *= rad;
//
//        diff0 = GetViewSpacePos(texDiffuse, TexCoord0 + vSample[0].xy, FarClip.xyz + PS_ddx.xyz*vSample[0].x + PS_ddy.xyz*vSample[0].y).xyz - pos.xyz;
//        diff1 = GetViewSpacePos(texDiffuse, TexCoord0 + vSample[1].xy, FarClip.xyz + PS_ddx.xyz*vSample[1].x + PS_ddy.xyz*vSample[1].y).xyz - pos.xyz;
//        diff2 = GetViewSpacePos(texDiffuse, TexCoord0 + vSample[2].xy, FarClip.xyz + PS_ddx.xyz*vSample[2].x + PS_ddy.xyz*vSample[2].y).xyz - pos.xyz;
//        diff3 = GetViewSpacePos(texDiffuse, TexCoord0 + vSample[3].xy, FarClip.xyz + PS_ddx.xyz*vSample[3].x + PS_ddy.xyz*vSample[3].y).xyz - pos.xyz;
//
//        length4 = vec4( length(diff0), length(diff1), length(diff2), length(diff3) ); 
//
//		diff0 = diff0 / length4.x; 
//		diff1 = diff1 / length4.y; 
//		diff2 = diff2 / length4.z; 
//		diff3 = diff3 / length4.w; 
//
//		length4 = max(vec4(0.5, 0.5, 0.5, 0.5), length4);
//		length4 *= AOSetting.x; 
//
//		occlude.x = dot(normal, diff0);
//		occlude.y = dot(normal, diff1);
//		occlude.z = dot(normal, diff2);
//		occlude.w = dot(normal, diff3);
//
//		occlude = max( vec4(0.0, 0.0, 0.0, 0.0), occlude - vec4(AOSetting.y, AOSetting.y, AOSetting.y, AOSetting.y)) * ( vec4(1.0, 1.0, 1.0, 1.0) / (vec4(1.0, 1.0, 1.0, 1.0) + length4 * length4) );
//
//		aoacc += occlude;


	float ao = dot( aoacc, vec4(AOSetting.z, AOSetting.z, AOSetting.z, AOSetting.z )) / 4.0;  	
	ao = clamp( ao - 0.2, 0.0, 1.0 );
    
 	//ao = 1.0 - ao;
 	//gl_FragColor = vec4( (pos.xyz + campos) * 0.01, 1.0);
    //gl_FragColor = vec4( normal.xyz * 0.5 + 0.5, 1.0);
    gl_FragColor = vec4(0.0, 0.0, 0.0, ao);
}


